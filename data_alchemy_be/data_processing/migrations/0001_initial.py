# Generated by Django 5.0.1 on 2024-10-26 06:51

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the dataset', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the dataset', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description of the dataset')),
                ('file', models.FileField(help_text='The uploaded dataset file', upload_to='datasets/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['csv', 'xlsx', 'xls'])])),
                ('file_type', models.CharField(choices=[('CSV', 'CSV'), ('EXCEL', 'Excel')], help_text='Type of the uploaded file', max_length=10)),
                ('rows_count', models.IntegerField(blank=True, help_text='Total number of rows in the dataset', null=True)),
                ('columns_count', models.IntegerField(blank=True, help_text='Total number of columns in the dataset', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', help_text='Current processing status of the dataset', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the dataset was uploaded')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the dataset was last updated')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the dataset processing was completed', null=True)),
                ('user', models.ForeignKey(help_text='User who uploaded the dataset', on_delete=django.db.models.deletion.CASCADE, related_name='datasets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the job', primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('INFERENCE', 'Type Inference'), ('EXPORT', 'Data Export'), ('CONVERSION', 'Type Conversion')], help_text='Type of processing job', max_length=20)),
                ('status', models.CharField(choices=[('QUEUED', 'Queued'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='QUEUED', help_text='Current status of the job', max_length=20)),
                ('celery_task_id', models.CharField(blank=True, help_text='Celery task ID for tracking', max_length=255, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if job failed', null=True)),
                ('result', models.JSONField(blank=True, help_text='Job result data', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the job was created')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the job started processing', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the job completed or failed', null=True)),
                ('dataset', models.ForeignKey(help_text='Dataset being processed', on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='data_processing.dataset')),
            ],
            options={
                'verbose_name': 'Processing Job',
                'verbose_name_plural': 'Processing Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Current name of the column', max_length=255)),
                ('original_name', models.CharField(help_text='Original name of the column in the file', max_length=255)),
                ('position', models.IntegerField(help_text='Position of the column in the dataset')),
                ('inferred_type', models.CharField(choices=[('TEXT', 'Text'), ('INTEGER', 'Integer'), ('FLOAT', 'Float'), ('DATE', 'Date'), ('DATETIME', 'DateTime'), ('BOOLEAN', 'Boolean'), ('CATEGORY', 'Category')], help_text='Data type inferred by the system', max_length=20)),
                ('current_type', models.CharField(choices=[('TEXT', 'Text'), ('INTEGER', 'Integer'), ('FLOAT', 'Float'), ('DATE', 'Date'), ('DATETIME', 'DateTime'), ('BOOLEAN', 'Boolean'), ('CATEGORY', 'Category')], help_text='Current data type (may be modified by user)', max_length=20)),
                ('nullable', models.BooleanField(default=True, help_text='Whether the column contains null values')),
                ('unique_values_count', models.IntegerField(default=0, help_text='Number of unique values in the column')),
                ('null_count', models.IntegerField(default=0, help_text='Number of null values in the column')),
                ('sample_values', models.JSONField(default=list, help_text='Sample values from the column')),
                ('statistics', models.JSONField(default=dict, help_text='Statistical information about the column')),
                ('dataset', models.ForeignKey(help_text='Dataset this column belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='data_processing.dataset')),
            ],
            options={
                'verbose_name': 'Column',
                'verbose_name_plural': 'Columns',
                'ordering': ['position'],
                'unique_together': {('dataset', 'name')},
            },
        ),
    ]
